
import math
import pytest
from Einf√ºhrung.logik_impl import (
    Pose2D,
    Twist,
    calculate_distance,
    calculate_target_angle,
    normalize_angle,
    navigate_to_target,
)

def test_calculate_distance():
    a = Pose2D(0.0, 0.0, 0.0)
    b = Pose2D(3.0, 4.0, 0.0)
    assert calculate_distance(a, b) == pytest.approx(5.0)

def test_calculate_target_angle():
    a = Pose2D(0.0, 0.0, 0.0)
    b = Pose2D(0.0, 1.0, 0.0)
    assert calculate_target_angle(a, b) == pytest.approx(math.pi / 2)

def test_normalize_angle_wraps():
    assert normalize_angle(3 * math.pi) == pytest.approx(math.pi)
    assert normalize_angle(-3 * math.pi) == pytest.approx(-math.pi)

def test_navigate_rotate_then_forward():
    current = Pose2D(0.0, 0.0, 0.0)
    target = Pose2D(0.0, 1.0, 0.0)
    cmd, reached = navigate_to_target(
        True, target, current, position_tolerance=0.1, angle_tolerance=0.01, linear_speed=0.4, angular_speed=0.5
    )
    assert not reached
    assert cmd.linear_x == pytest.approx(0.0)
    assert abs(cmd.angular_z) == pytest.approx(0.5)

    current.theta = math.pi / 2
    cmd2, reached2 = navigate_to_target(
        True, target, current, position_tolerance=0.1, angle_tolerance=0.1, linear_speed=0.4, angular_speed=0.5
    )
    assert not reached2
    assert cmd2.linear_x == pytest.approx(0.4)
    assert cmd2.angular_z == pytest.approx(0.0)

def test_navigate_reached():
    current = Pose2D(1.0, 1.0, 0.0)
    target = Pose2D(1.05, 1.05, 0.0)
    cmd, reached = navigate_to_target(True, target, current, position_tolerance=0.1)
    assert reached
    assert cmd.linear_x == pytest.approx(0.0)
    assert cmd.angular_z == pytest.approx(0.0)

def test_event_false_stops():
    current = Pose2D(0.0, 0.0, 0.0)
    target = Pose2D(10.0, 0.0, 0.0)
    cmd, reached = navigate_to_target(False, target, current)
    assert not reached
    assert cmd.linear_x == pytest.approx(0.0)
    assert cmd.angular_z == pytest.approx(0.0)
